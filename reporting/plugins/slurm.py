"""High performance computing Slurm data processor"""

import csv
import datetime

from reporting.collectors import IDataSource
from reporting.utilities import init_message


EPOCH = datetime.datetime(1970, 1, 1)


class SlurmInput(IDataSource):
    """To be used to parse Accounting information from Slurm"""
    def __init__(self, path):
        self._path = path

    @staticmethod
    def _convert_to_timestamp(date_string):
        """Convert a iso date time string to timestamp"""
        date_obj = datetime.datetime.strptime(date_string, '%Y-%m-%dT%H:%M:%S')
        return int((date_obj - EPOCH).total_seconds())


    @staticmethod
    def _read_data(path):
        """Get data from the output of slurm sacct command"""
        # the file is generated by redirect below command to it:
        # sacct -P -S 2016-12-01 -o User,Partition,JobID,CPUTimeRAW,Start,End -s COMPLETED
        data = []
        with open(path, 'r') as csvfile:
            reader = csv.DictReader(csvfile, delimiter='|')
            for row in reader:
                processed = {}
                if 'User' in row and len(row['User'].strip()) > 0:
                    processed['user'] = row['User']
                    processed['partition'] = row['Partition']
                    processed['job_id'] = row['JobID']
                    processed['start'] = SlurmInput._convert_to_timestamp(row['Start'])
                    processed['end'] = SlurmInput._convert_to_timestamp(row['End'])
                    processed['cpu_seconds'] = row['CPUTimeRAW']
                    data.append(processed)
        return data

    def get_data(self, **kwargs):
        """To be used to parse Accounting information from Slurm"""
        data = init_message()
        data['jobs'] = self._read_data(self._path)
        return data
